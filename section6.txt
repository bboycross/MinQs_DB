39
NoSQL : 방대한 데이터셋에서 빠르게 대규모로 작업해야 하는 경우에 사용
비 관계형 데이터베이스
HBase : HDFS 위에 구축 > 빠르고 확장성 뛰어난 트랜잭션 시스템 사용하여 데이터 쿼리 

custmores -> Internet -> Web servers -> MongoDB <- Spark Streaming / Hadoop YARN, HDFS <- Data source(s)

40
HBase : HDFS 기반 비관계형 확장 데이터베이스
대화형 DB, 쿼리언어 없지만 매우 빨리 질문에 대답할수 있는 API 보유
쿼리언어가 없고 오로지 CRUD API
HBase : 컬럼 계열 개념

모든 행(ROW)에 대한 빠른 액세스
행(ROW) unique KEY(고유키) 참조
각 행(ROW)은 몇 개의 COLUMN FAMILIE가 있고 희소한 데이터에 편리
COLUMN FAMILY 에는 임의 COLUMNS가 있음
COLUMN FAMILY 에는 매우 많은 COLUMNS이 있을 수 있음
각 CELL 에는 지정된 타임스탬프가 포함된 많은 버전이 있음
Sparse data is A-OK - 행(ROW)에 없는 열(COLUMN)은 Storage 를 소비하지 않음

HBase 엑세스 방법
HBase shell
Java API(기반) - Wrppers for Python, Scala 등등
Connect - Spark, Hive, Pig epdlxjqhrl
HBase 내장 REST service _ HTTP 요청 서비스결과 얻는데, 매우 쉬움
Thrift, Avro service - 데이터가 더 작게 표현될수 있음 / 단점:클라이언트,서버간에 긴밀한 연결이 있음 - 동기화되는것(간단하게 하려면 REST service 이용)

41
사용자별로 그룹화 된 Movierating 을 위한 HBase 테이블 구축
순서 : Python client -> REST service -> HBase/HDFS

포트포워딩 127.0.0.1:8000
su root -> password ->
/usr/hdp/current/hbase-master/bin/hbase-daemon.sh start rest 0-p 8000 --infoport 8001

starbase  package 설치

41 
/usr/hdp/current/hbase-master/bin/hbase-daemon.sh stop


42
pig는 실제로 HDFS 클러스터의 정보를 가져올 수 있음
list 안만들어짐
Hbase에서 리스트를 만들고 빠져나옴
wget http://media.sundog-soft.com/hadoop/hbase.pig
-> less hbase.pig -> 스크립트 들어가서 확인
pig hbase.pig -> 실행  완료 후
hbase shell
list -> scan 'users'
비활성화 하기 : disable 'users'
drop 'users'


43
Cassandra 개요
마스터노드 없음, 기본적으로 HBase와 동일한 기본데이터 모델, 데이터 구조 가지고있음
비 관계형 데이터베이스
CQL 쿼리 언어 사용
CAP : 일관성(DB에 뭔가 쓸때 즉시 대답을 얻지 않음) ,가용성(다른것에 대한 일관성을 바꿀 의향이 있는 경우), 파티션공차(DB를 쉽게 분할하여 분산시킬수 있음)
카산드라는 일관성보단 가용성 선호
링 아키텍쳐로 마스터노드가 없음. 클러스터의 모든 노드가 통신.
Hadoop 클러스터사용하면 별도의 랙과 개별 데이터센터를 설정할 수 있음
DB는 비정규화. 조인안됨. 질의는 기본키에 있어야됨. 
CQLSH : 테이블 생성 시 사용할 수 있는 인터랙티브 도구
Cassnadra + Spark  적합. 스파크는 모든 데이터베이스와 통합 잘됨.
Cassnadra 데이터가 비정규화되어 응용프로그램에 신속하게 배출 가능

44
yum update
python 2.7 업데이트
카산드라설치
movieLens 데이터셋으로 작업 
CQL 과 SQL 의 구문은 비슷함, 조인할수없음

45
카산드라 + 스파크 출력 

46
MongoDB 
모든 Json 파일을 MongoDB 문서에 넣을수 있음

스키마 강요되지 않음
원하는 경우 모든 문서에 다른 필드를 포함할 수 있음
다른 데이터베이스와 같이 단일 "키" 없음
원하는 모든 필드에 인덱스를 만들거나 필드 조합을 만들 수 있음
"Shard"를 하려면 일부 인덱스에서 수행
다양한 유연성을 제공

MongoDB Databases는 Collections 포함하고 Collections는 Documents를 포함
주된 제한은 서로다른 컬렉션 간 데이터를 이동할 수 없음

단일 마스터 아키텍처

대부분의 서버가 기본 서버에 동의해야함
복제를 원할 경우 3개의 서버가 있어야 함
'arbiter' 노드를 설정할 수 있음
- 하지만 한 개 만 설정 가능
복제본 집합의 서버에 대한 정보를 충분히 알고 있어야 어떤게 주 서버인지 알 수 있음
복제본은 내구성만 다루며 확장 가능
- 2차 에서 조언을 얻을 수 없다면 - 보통 추천안함
- 새로 선출되는 잠시 동안 DB가 읽기 전용 모드로 전환됩니다.

MongoDB 사용하여 여러서버에서 데이터를 확장하는 것이 Sharding . / 실제로 여러개의 복제본 세트가 있어야 작동함.

Sharding 단점
3개 설정서버가 있어야 하며, 그중 하나가 다운되면 전체 DB가 다운됨
가용성을 위해 의도적으로 일관성 유지

MongoDB : NoSQL 데이터베이스가 아님
완전한 자바 스크립트 인터프리터가 있는 shell을 가지고 있음(JavaScript함수를 쉽게 실행 가능)
정보의 큰 문서, 텍스트를 저장하는 것과 같은 것들을 위한 방법
실제 맵 리듀스 실행 가능
GirdFS == HDFS 비슷함
Hadoop을 전혀 사용하지 않아도 되며 실제로 더 효율적일 수 있다
Hadoop, Spark, MongoDB 같이 사용할 경우 쉽게 사용이 가능(편한 쿼리로 작성, 관계형데이터베이스는 아님{JOIN 불가, 정규화 데이터 효율적 처리 불가})

47
몽고디비 설치 불가.
이유 모르겠음.;;;;
u.user 데이터 -> spark DF -> mongo DB 수정
카산드라 코드와 비슷함
두 커넥터를 서로 연결하기 위해 다른 커넥터를 사용

48
MongoDB Shell 사용
Apache Spark 와 같은 것으로 통합하여 실제로 데이터분석을 수행 할 수 있다.
MongoDB 에 저장되며 잠재적으로 MongoDB로 데이터를 내보내 프론트엔드 웹 애플리케이션에 제공

49
데이터베이스 기술 선택
고려해야하는 기능
함께 통합해야하는 시스템 _ 서로다른 기술에 따라 커넥터가 다름
확장 요구사항 _ 얼마나 많은 데이터인지, 시간 지남에 따라 무한대로 커지는지 -> 저장할수 있는 데이터에만 국한되지 않는 기술이 필요함(컴퓨터1대에서 돌아간다? 카산드라, 몽고DB, HBase 등을 사용해 전체 클러스터에 데이터저장소를 배포하고 수평, 수직으로 확장)
트랜잭션 속도 _  초당 얼마나 많은 요청을 하는지 (매우 큰 웹 회사에서 분산 NoSQL 사용하는 등)
필요한 지원 _ 새로운 기술을 발전, 구성할 수 있는 자체전문기술을 보유하고 있는지
(시스템 보안에 깊이 생각해야함_NoSQL 기본설정은 아무런 보안 없음)
서버의 비용 _ 전체 서버의 비용도 생각해야함
 
CAP
일관성, 가용성, 파티션허용오차 셋중 2개 선택 _ 요구사항의 규모

파티션허용오차 _ 트랜잭션처리를 위해 서버가 2개이상 필요하다면 중요함

이상황엔 응용프로그램에 따라 달라짐

가용성 _ 짧은 시간동안 시스템이 다운되었을때 문제가 된다면 중요함
일관성 _ 실제 트랜잭션 정보(주식거래, 금융거래) 관련한다면 중요함

시스템에 필요한 최소 요구사항을 생각하고 항상 간단하게 유지하는게 제일 좋음
(엄청난 규모가 아니라면 NoSQL 배포 X)
간단하게 유지하고 조직내에서 전문지식이 부족한 새로운 시스템을 배포하면 안됨
단순한 기술, 단순한 아키텍처는 유지보수가 훠어얼씬 쉬움

단순성은 모든아키텍처 결정 기반이 되야함



50
거대한 주식거래시스템 구축
대규모 분석 작업 수행

파티션 : 파티션을 가질 필요가 있는 큰 데이터를 가지고 있음. 
일관성 : 실제 시스템 데이터(주식)와 다른 데이터를 얻고 있음

일관성 -------------- 파티션 
HBase or MongoDB 선택
하나의 마스터, 하나의 기본 DB를 가지고 있기 때문에 매우 일관성 있음
단점 : 주 마스터가 다운되면 시스템은 새로운 주 노드를 선택해야 함, 모든 애플리케이션 클라이언트가이를 신속 처리 해야함

HBase -------------- MongoDB
강력한 외부 지원 필요
MongoDB 

하둡 클러스터가 있는 경우 HBase 채택

비슷비슷함. 실질적으로 가용하고 있고, 사용이 편리하다던지 수월하고, 그 작업이 가능하다면 할 수 있는 방법으로 하는게 옳다.

조금 더 편하게 작업하기 위해 대책을 강구하여야 하며, 잘 모르는 분야에 대해서 충분히 이해하고 접근하여 잘못되지 않게 작업하는게 제일 중요하며 제일 좋은 케이스이다.








